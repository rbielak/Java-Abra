package org.ephman.junit.generated;

import java.sql.*;
import org.ephman.abra.utils.*;
import org.ephman.abra.database.*;

// Do not edit!! generated classes 
/** a factory to link the class Author
 * to it's sql code and database table
 * @version Thu Jun 30 15:12:42 EDT 2005
 * @author generated by Dave Knull
 */

public abstract class AbstractAuthorFactory extends FactoryBase{


/** this method returns the update string for the db */

	protected String makeUpdateString () {
		return updateString;
	}
	protected static final String updateString = "update db_author set " +
		"version_number = ?," +
		"wadr_street = ?," +
		"wadr_state = ?," +
		"wadr_city = ?," +
		"a_war_vet = ?," +
		"a_war_hero = ?," +
		"a_sal = ?," +
		"a_lname = ?," +
		"hadr_street = ?," +
		"hadr_state = ?," +
		"hadr_city = ?," +
		"a_fname = ?," +
		"a_b_day = ? where a_oid = ?";

/** this method returns the insert string for the db */

	protected String makeInsertString () {
		return insertString;
	}
	protected static final String insertString = "insert into db_author (" +
		"version_number," +
		"wadr_street," +
		"wadr_state," +
		"wadr_city," +
		"a_war_vet," +
		"a_war_hero," +
		"a_sal," +
		"a_lname," +
		"hadr_street," +
		"hadr_state," +
		"hadr_city," +
		"a_fname," +
		"a_b_day) values (" +
		" ?," +
		"?," +
		"?," +
		"?," +
		" ?," +
		" ?," +
		" ?," +
		" ?," +
		"?," +
		"?," +
		"?," +
		" ?," +
		" ?)";

/** this method sets the args for a prepared statement */

	protected void setArguments (PreparedStatement stmt, Object obj, boolean update) throws SQLException {
		Author author = (Author)obj;
		int i = 1;
		if (!update && useStoredProcs ()) // set return val..
			((CallableStatement)stmt).registerOutParameter (i++, Types.INTEGER);
		stmt.setInt (i++, author.getVersion ());
		stmt.setString (i++, author.getWorkAddress ().getStreet ());
		stmt.setString (i++, author.getWorkAddress ().getState ());
		stmt.setString (i++, author.getWorkAddress ().getCity ());
		stmt.setString (i++, author.getWarVeteran ()? "T" : "F");
		stmt.setString (i++, getBooleanAsString(author.getWarHero ()));
		if (author.getSalary() == null) 
			stmt.setNull (i++, java.sql.Types.DECIMAL);
		else
			stmt.setObject (i++, author.getSalary ());
		stmt.setString (i++, author.getLastName ());
		stmt.setString (i++, author.getHomeAddress ().getStreet ());
		stmt.setString (i++, author.getHomeAddress ().getState ());
		stmt.setString (i++, author.getHomeAddress ().getCity ());
		stmt.setString (i++, author.getFirstName ());
		stmt.setTimestamp (i++, author.getBirthday ());
		if (update)
			stmt.setInt (i++, author.getOid ());
	}

/** this method tells FactoryBase whether or not clobs exist */
	protected boolean hasClobs () { return false; }

	protected String makeInsertCall () {
		return insertCallString;
	}

	public static final String insertCallString = "{? = call FUNC_INS_Author(?,?,?,?,?,?,?,?,?,?,?,?,?) }";

	public static final String updateCallString = "{ call PROC_UPD_Author(?,?,?,?,?,?,?,?,?,?,?,?,?,?) }";

	protected String makeUpdateCall () {
		return updateCallString;
	}

	protected boolean useStoredProcs () { return false; }
	// methods to store and delete
	public void delete (DatabaseSession dbSess, Author foo) throws SQLException {
		super.deleteObject (dbSess, foo);
	}
	public void store (DatabaseSession dbSess, Author foo) throws SQLException {
		super.storeObject (dbSess, foo);
	}


	/* a routine to build an object of this type from an sql ResultSet */

	protected Identified makeFromResultSet (ResultSet rs) throws SQLException{
		Author foo = new Author ();
		refreshFromResultSet (foo, rs);
		return foo;
	}

	/* a routine to overwrite an object of this type from an sql ResultSet */
	protected void refreshFromResultSet (Identified item, ResultSet rs) throws SQLException{
		Author foo = (Author)item;
		foo.setVersion (rs.getInt(version_number));
		Address workAddress = new Address ();
		foo.setWorkAddress (workAddress);
		workAddress.setStreet (rs.getString (workAddress_street));
		workAddress.setState (rs.getString (workAddress_state));
		workAddress.setCity (rs.getString (workAddress_city));
		String bWarVeteran = rs.getString (warVeteran);
		if (bWarVeteran!= null)
			foo.setWarVeteran (bWarVeteran.equals ("T"));
		String t_WarHero = rs.getString (warHero);
		foo.setWarHero(getStringAsBoolean (t_WarHero));
		foo.setSalary ((java.math.BigDecimal)rs.getObject (salary));
		foo.setOid (rs.getInt (oid));
		foo.setLastName (rs.getString (lastName));
		Address homeAddress = new Address ();
		foo.setHomeAddress (homeAddress);
		homeAddress.setStreet (rs.getString (homeAddress_street));
		homeAddress.setState (rs.getString (homeAddress_state));
		homeAddress.setCity (rs.getString (homeAddress_city));
		foo.setFirstName (rs.getString (firstName));
		foo.setBirthday (rs.getTimestamp (birthday));
	}

	public String makeEditLookupString () {
		String result = "select "
			+ "hadr_street,"
			+ "wadr_street,"
			+ "wadr_city,"
			+ "this.a_fname"
			+ " from db_author this"
			+ " where ";
		return result;
	}

	public org.ephman.junit.generated.EditAuthor makeEditFromResultSet (ResultSet rs) throws SQLException {
		org.ephman.junit.generated.EditAuthor foo = new org.ephman.junit.generated.EditAuthor ();
		foo.setHomeAddress (rs.getString (homeAddress_street));
		foo.setWorkAddress (new org.ephman.junit.generated.AddrView ());
		foo.getWorkAddress().setStreet (rs.getString (workAddress_street));
		foo.getWorkAddress().setCity (rs.getString (workAddress_city));
		foo.setFirstName (rs.getString (firstName));
		return foo;
	}

	public ViewLookup editLookup;

	public Author getByOid (DatabaseSession dbSess, int object_id) throws SQLException {
		return (Author)super.getObject (dbSess, this.oid, object_id);
	}
	public String getPrimaryColumn () { return "a_oid"; }

	public String getTableName () { return tableName; }


	// the variables to map Java to Sql

	protected final String tableName = "db_author";

	public final String workAddress_street = "wadr_street";

	public final String workAddress_state = "wadr_state";

	public final String workAddress_city = "wadr_city";

	public final String warVeteran = "a_war_vet";

	public final String warHero = "a_war_hero";

	public final String salary = "a_sal";

	public final String oid = "a_oid";

	public final String lastName = "a_lname";

	public final String homeAddress_street = "hadr_street";

	public final String homeAddress_state = "hadr_state";

	public final String homeAddress_city = "hadr_city";

	public final String firstName = "a_fname";

	public final String birthday = "a_b_day";

	public final String version_number = "version_number";

	protected AbstractAuthorFactory () {
		super ();
		editLookup = new ViewLookup (makeEditLookupString (),
				"makeEditFromResultSet", 
				this);
	}


}
