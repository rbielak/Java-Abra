package org.ephman.junit.generated;

import org.ephman.xml.XmlNode;
import java.util.Vector;
/** 
* a XmlMarshaller for Address
 * @version Thu Jun 30 15:12:42 EDT 2005
 * @author generated by Dave Knull
 */

public class AddressXmlMarshaller {


	public static String marshal (Address address) {
		return marshal (address, "Address", "");
	}

	public static String marshal (Address address, String node_name, String indent_tabs) {
		StringBuffer result = new StringBuffer (indent_tabs).append ("<").append(node_name);
		result.append (marshalAttributes (address));
		String these_els =  marshalElements (address, indent_tabs+"\t");
		if (these_els != null && these_els.length()>0) 
			result.append (these_els).append ("\n").append (indent_tabs).append ("</").append (node_name).append (">\n");
		else
			result.append ("/>");
		return result.toString ();
	}

	public static Address unmarshal (XmlNode thisNode) {
		Address address = new Address ();
		unmarshal (thisNode, address);
		return address;
	}
	/** unmarshal passing Xmlnode + pre-formed	 * Address to populate
	*/
	public static void unmarshal (XmlNode thisNode, Address address) {
	}

	protected static String marshalAttributes (Address address) {
		StringBuffer result = new StringBuffer ();
		result.append (" street=\"").append (address.getStreet ());
		result.append (" state=\"").append (address.getState ());
		result.append (" city=\"").append (address.getCity ());
		return result.toString ();
	}

	protected static String marshalElements (Address address, String indent_tabs) {
		StringBuffer result = new StringBuffer (indent_tabs);
		return result.toString ();
	}

}
