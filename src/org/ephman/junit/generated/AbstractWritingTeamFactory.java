package org.ephman.junit.generated;

import java.sql.*;
import org.ephman.abra.utils.*;
import org.ephman.abra.database.*;

// Do not edit!! generated classes 
/** a factory to link the class WritingTeam
 * to it's sql code and database table
 * @version Thu Jun 30 15:12:42 EDT 2005
 * @author generated by Dave Knull
 */

public abstract class AbstractWritingTeamFactory extends FactoryBase{


/** this method returns the update string for the db */

	protected String makeUpdateString () {
		return updateString;
	}
	protected static final String updateString = "update db_w_team set " +
		"version_number = ?," +
		"w_master_name = ?," +
		"w_apprentice_name = ? where w_oid = ?";

/** this method returns the insert string for the db */

	protected String makeInsertString () {
		return insertString;
	}
	protected static final String insertString = "insert into db_w_team (" +
		"version_number," +
		"w_master_name," +
		"w_apprentice_name) values (" +
		" ?," +
		" ?," +
		" ?)";

/** this method sets the args for a prepared statement */

	protected void setArguments (PreparedStatement stmt, Object obj, boolean update) throws SQLException {
		WritingTeam writingTeam = (WritingTeam)obj;
		int i = 1;
		if (!update && useStoredProcs ()) // set return val..
			((CallableStatement)stmt).registerOutParameter (i++, Types.INTEGER);
		stmt.setInt (i++, writingTeam.getVersion ());
		stmt.setString (i++, writingTeam.getMastersName ());
		stmt.setString (i++, writingTeam.getApprenticeName ());
		if (update)
			stmt.setInt (i++, writingTeam.getOid ());
	}

/** this method tells FactoryBase whether or not clobs exist */
	protected boolean hasClobs () { return false; }

	protected String makeInsertCall () {
		return insertCallString;
	}

	public static final String insertCallString = "{? = call FUNC_INS_WritingTeam(?,?,?) }";

	public static final String updateCallString = "{ call PROC_UPD_WritingTeam(?,?,?,?) }";

	protected String makeUpdateCall () {
		return updateCallString;
	}

	protected boolean useStoredProcs () { return false; }
	// methods to store and delete
	public void delete (DatabaseSession dbSess, WritingTeam foo) throws SQLException {
		super.deleteObject (dbSess, foo);
	}
	public void store (DatabaseSession dbSess, WritingTeam foo) throws SQLException {
		super.storeObject (dbSess, foo);
	}


	/* a routine to build an object of this type from an sql ResultSet */

	protected Identified makeFromResultSet (ResultSet rs) throws SQLException{
		WritingTeam foo = new WritingTeam ();
		refreshFromResultSet (foo, rs);
		return foo;
	}

	/* a routine to overwrite an object of this type from an sql ResultSet */
	protected void refreshFromResultSet (Identified item, ResultSet rs) throws SQLException{
		WritingTeam foo = (WritingTeam)item;
		foo.setVersion (rs.getInt(version_number));
		foo.setOid (rs.getInt (oid));
		foo.setMastersName (rs.getString (mastersName));
		foo.setApprenticeName (rs.getString (apprenticeName));
	}

	public WritingTeam getByOid (DatabaseSession dbSess, int object_id) throws SQLException {
		return (WritingTeam)super.getObject (dbSess, this.oid, object_id);
	}
	public String getPrimaryColumn () { return "w_oid"; }

	public String getTableName () { return tableName; }


	// the variables to map Java to Sql

	protected final String tableName = "db_w_team";

	public final String oid = "w_oid";

	public final String mastersName = "w_master_name";

	public final String apprenticeName = "w_apprentice_name";

	public final String version_number = "version_number";

	protected AbstractWritingTeamFactory () {
		super ();
	}


}
