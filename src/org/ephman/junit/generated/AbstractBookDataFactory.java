package org.ephman.junit.generated;

import java.sql.*;
import org.ephman.abra.utils.*;
import org.ephman.abra.database.*;

// Do not edit!! generated classes 
/** a factory to link the class BookData
 * to it's sql code and database table
 * @version Thu Jun 30 15:12:42 EDT 2005
 * @author generated by Dave Knull
 */

public abstract class AbstractBookDataFactory extends FactoryBase{

	private String queryString =
		"select b_oid, b_title, a_fname, a_lname from db_book,db_author where (a_oid = b_author)";

	protected String getSelectSql () {return queryString;}

	protected String getSelectSql (String column) {
		return queryString + " and (" + column + " = ?)";
	}

	protected String getCursorQuerySql () {return queryString;}

	protected boolean defaultNeedsWhereLogic () {return false;};

	protected boolean needsAndBeforeFilter () {return true;};

	protected String getSelectCountSql () {
		throw new RuntimeException ("Not supported for query based factories");
	}

	protected boolean useStoredProcs () {
		return false;
	}

	protected String getDeleteSql () {
		throw new RuntimeException ("Not supported for query based factories");
	}

	protected void setArguments (PreparedStatement ps, Object o, boolean update) throws SQLException {
		throw new RuntimeException ("Not supported for query based factories");
	}

	protected String makeUpdateCall () {
		throw new RuntimeException ("Not supported for query based factories");
	}

	protected String makeInsertCall () {
		throw new RuntimeException ("Not supported for query based factories");
	}

	protected String makeUpdateString () {
		throw new RuntimeException ("Not supported for query based factories");
	}

	protected String makeInsertString () {
		throw new RuntimeException ("Not supported for query based factories");
	}


/** this method tells FactoryBase whether or not clobs exist */
	protected boolean hasClobs () { return false; }


	/* a routine to build an object of this type from an sql ResultSet */

	protected Identified makeFromResultSet (ResultSet rs) throws SQLException{
		BookData foo = new BookData ();
		refreshFromResultSet (foo, rs);
		return foo;
	}

	/* a routine to overwrite an object of this type from an sql ResultSet */
	protected void refreshFromResultSet (Identified item, ResultSet rs) throws SQLException{
		BookData foo = (BookData)item;
		foo.setTitle (rs.getString (title));
		foo.setOid (rs.getInt (oid));
		foo.setLastName (rs.getString (lastName));
		foo.setFirstName (rs.getString (firstName));
	}

	public BookData getByOid (DatabaseSession dbSess, int object_id) throws SQLException {
		return (BookData)super.getObject (dbSess, this.oid, object_id);
	}
	public String getPrimaryColumn () { return "b_oid"; }

	public String getTableName () { return tableName; }


	// the variables to map Java to Sql

	protected final String tableName = "";

	public final String title = "b_title";

	public final String oid = "b_oid";

	public final String lastName = "a_lname";

	public final String firstName = "a_fname";

	protected AbstractBookDataFactory () {
		super ();
	}


}
